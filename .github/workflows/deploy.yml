name: Deploy Portfolio to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: portfolio-frontend
  ECR_REPOSITORY_BACKEND: portfolio-backend

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./frontend
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_FRONTEND 2>/dev/null || \
            aws ecr create-repository --repository-name $ECR_REPOSITORY_FRONTEND
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./backend
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND 2>/dev/null || \
            aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG

      - name: Deploy infrastructure
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/vpc.yaml \
            --stack-name portfolio-vpc \
            --no-fail-on-empty-changeset

          VPC_ID=$(aws cloudformation describe-stacks \
            --stack-name portfolio-vpc \
            --query 'Stacks[0].Outputs[?OutputKey==`VPC`].OutputValue' \
            --output text)
          
          PUBLIC_SUBNETS=$(aws cloudformation describe-stacks \
            --stack-name portfolio-vpc \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicSubnets`].OutputValue' \
            --output text)
          
          PRIVATE_SUBNETS=$(aws cloudformation describe-stacks \
            --stack-name portfolio-vpc \
            --query 'Stacks[0].Outputs[?OutputKey==`PrivateSubnets`].OutputValue' \
            --output text)

          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/alb.yaml \
            --stack-name portfolio-alb \
            --parameter-overrides \
              VPC=$VPC_ID \
              PublicSubnets=$PUBLIC_SUBNETS \
            --no-fail-on-empty-changeset

          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/ecs.yaml \
            --stack-name portfolio-ecs \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              VPC=$VPC_ID \
              PrivateSubnets=$PRIVATE_SUBNETS \
              FrontendImage=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
              BackendImage=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
              MongoDBURI="${{ secrets.MONGODB_URI }}" \
            --no-fail-on-empty-changeset

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster portfolio-cluster \
            --service portfolio-service \
            --force-new-deployment

          aws ecs wait services-stable \
            --cluster portfolio-cluster \
            --services portfolio-service

      - name: Get deployment URL
        run: |
          URL=$(aws cloudformation describe-stacks \
            --stack-name portfolio-alb \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerURL`].OutputValue' \
            --output text)
          echo "Deployment complete! URL: $URL"